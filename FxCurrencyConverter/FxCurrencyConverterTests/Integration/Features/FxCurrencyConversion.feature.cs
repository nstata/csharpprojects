// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FxCurrencyConverterIntegrationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("FxCurrencyConversion", Description="\tSimple library for currency conversion", SourceFile="Features\\FxCurrencyConversion.feature", SourceLine=0)]
    public partial class FxCurrencyConversionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "FxCurrencyConversion.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "FxCurrencyConversion", "\tSimple library for currency conversion", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When using invalid Currency pair conversion should not succeed.", SourceLine=4)]
        public virtual void WhenUsingInvalidCurrencyPairConversionShouldNotSucceed_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When using invalid Currency pair conversion should not succeed.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CurrencyPair",
                            "Side",
                            "Amount"});
                table1.AddRow(new string[] {
                            "1",
                            "GBP/USA",
                            "Buy",
                            "100"});
                table1.AddRow(new string[] {
                            "2",
                            "GBP/",
                            "Buy",
                            "100"});
                table1.AddRow(new string[] {
                            "3",
                            "GBP/GBP",
                            "Buy",
                            "100"});
                table1.AddRow(new string[] {
                            "4",
                            "XXX/YYY",
                            "Buy",
                            "100"});
#line 6
 testRunner.Given("our input is:", ((string)(null)), table1, "Given ");
#line hidden
#line 13
 testRunner.When("we run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "ConversionResult",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed"});
                table2.AddRow(new string[] {
                            "1",
                            "ConversionFailedInvalidCcyPair",
                            "",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "2",
                            "ConversionFailedInvalidCcyPair",
                            "",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "3",
                            "ConversionFailedInvalidCcyPair",
                            "",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "4",
                            "ConversionFailedInvalidCcyPair",
                            "",
                            "",
                            ""});
#line 15
 testRunner.Then("the expected results should be", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When the amount entered is invalid (zero or negative), conversion should not succ" +
            "eed.", SourceLine=22)]
        public virtual void WhenTheAmountEnteredIsInvalidZeroOrNegativeConversionShouldNotSucceed_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the amount entered is invalid (zero or negative), conversion should not succ" +
                    "eed.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CurrencyPair",
                            "Side",
                            "Amount"});
                table3.AddRow(new string[] {
                            "1",
                            "GBP/USD",
                            "Buy",
                            "0"});
                table3.AddRow(new string[] {
                            "2",
                            "GBP/USD",
                            "Buy",
                            "-10"});
#line 24
 testRunner.Given("our input is:", ((string)(null)), table3, "Given ");
#line hidden
#line 29
 testRunner.When("we run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "ConversionResult",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed"});
                table4.AddRow(new string[] {
                            "1",
                            "ConversionFailedInvalidCcyAmount",
                            "",
                            "",
                            ""});
                table4.AddRow(new string[] {
                            "2",
                            "ConversionFailedInvalidCcyAmount",
                            "",
                            "",
                            ""});
#line 31
 testRunner.Then("the expected results should be", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When the CurrencyPair entered is all lowercase or all uppercase conversion should" +
            " be successful.", SourceLine=37)]
        public virtual void WhenTheCurrencyPairEnteredIsAllLowercaseOrAllUppercaseConversionShouldBeSuccessful_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the CurrencyPair entered is all lowercase or all uppercase conversion should" +
                    " be successful.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CurrencyPair",
                            "Side",
                            "Amount"});
                table5.AddRow(new string[] {
                            "1",
                            "GBP/USD",
                            "Buy",
                            "100"});
                table5.AddRow(new string[] {
                            "2",
                            "gbp/usd",
                            "Buy",
                            "100"});
#line 39
 testRunner.Given("our input is:", ((string)(null)), table5, "Given ");
#line hidden
#line 44
 testRunner.When("we run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "ConversionResult",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "CcyPair",
                            "OriginalAmount",
                            "OriginalAmountCcy"});
                table6.AddRow(new string[] {
                            "1",
                            "Successful",
                            "USD",
                            "134.272",
                            "1.34272",
                            "GBP/USD",
                            "100",
                            "GBP"});
                table6.AddRow(new string[] {
                            "2",
                            "Successful",
                            "usd",
                            "134.272",
                            "1.34272",
                            "gbp/usd",
                            "100",
                            "GBP"});
#line 46
 testRunner.Then("the expected results should be", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When using a valid Currency pair, conversion should succeed.", SourceLine=56)]
        public virtual void WhenUsingAValidCurrencyPairConversionShouldSucceed_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When using a valid Currency pair, conversion should succeed.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CurrencyPair",
                            "Side",
                            "Amount"});
                table7.AddRow(new string[] {
                            "1",
                            "GBP/USD",
                            "Buy",
                            "100"});
                table7.AddRow(new string[] {
                            "2",
                            "GBP/USD",
                            "Sell",
                            "100"});
#line 58
 testRunner.Given("our input is:", ((string)(null)), table7, "Given ");
#line hidden
#line 63
 testRunner.When("we run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "ConversionResult",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "CcyPair",
                            "OriginalAmount",
                            "OriginalAmountCcy"});
                table8.AddRow(new string[] {
                            "1",
                            "Successful",
                            "USD",
                            "134.272",
                            "1.34272",
                            "GBP/USD",
                            "100",
                            "GBP"});
                table8.AddRow(new string[] {
                            "2",
                            "Successful",
                            "USD",
                            "134.126",
                            "1.34126",
                            "GBP/USD",
                            "100",
                            "GBP"});
#line 65
 testRunner.Then("the expected results should be", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
