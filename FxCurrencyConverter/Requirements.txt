
UserId: long   1234567

User operation:
Successful
Duplicate


Upon receiving request:
 log this in DB as Pending

default
{00000000-0000-0000-0000-000000000000}

userId > 0


//duplicate:  userId + requestId
Check for Guid in DB:
  if Guid in DB exists:
	Check for conversion results:
	  if conversion results == Success:
		duplicate request
		log this new request in db
		quit with appropriate respone code: DuplicateRequest
	  if conversion results <> Success:
		try conversion again

  if Guid DOES NOT exist in DB:
    try conversion again


Trying conversion:
  check for user settings
    currency
    user active/inactive
    user allowed trading currency pair
	user min amount to trade
	user max amount to trade
    user available balance to trade
----------------------------

	And user has below settings:
	| UserId | TradingStatus | MinTradingAmt | MaxTradingAmt | CurrentBalance | UserCcy | AllowedTradingCcy |
	| 100010 | Active        | 1             | 1000          | 500            | GBP     | GBP/USD,EUR/GBP   |
	| 100020 | Active        | 10000         | 1000000       | 45000          | GBP     | GBP/USD           |

----------------------------

response
converted amount

TRy checking the code, if validations are tested far down. All validations check should be checked first. 


	


using System;

namespace UserFxCurrencyConverter
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}

	
	
	
Tests structure:feature files as per code flow for invalid /negative scenarios.
Instead of putting them in one negative scenario feature file,make different files and maintain tests.

code flow:: invalid settings 1st, negative scenarios

1)Input data is invalid: requestId, userId, ccypair, side, amount
2)Duplicate request check: requestId, userId
3)check user settings: currency trade(min, max, balance, ccy approved)
4)check market settings: Market closed, Stale price
5)