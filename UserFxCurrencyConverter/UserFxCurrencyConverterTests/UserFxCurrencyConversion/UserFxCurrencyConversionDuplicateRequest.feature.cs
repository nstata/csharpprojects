// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UserFxCurrencyConverterIntegrationTests.UserFxCurrencyConversion
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("UserFxCurrencyConversionDuplicateRequest", Description="\tSimple library for currency conversion based on user settings", SourceFile="UserFxCurrencyConversion\\UserFxCurrencyConversionDuplicateRequest.feature", SourceLine=0)]
    public partial class UserFxCurrencyConversionDuplicateRequestFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "UserFxCurrencyConversionDuplicateRequest.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UserFxCurrencyConversion", "UserFxCurrencyConversionDuplicateRequest", "\tSimple library for currency conversion based on user settings", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request was Successful and the same request is received again it sh" +
            "ould be marked as Duplicate and the conversion should not succeed", SourceLine=3)]
        public virtual void WhenPreviousRequestWasSuccessfulAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request was Successful and the same request is received again it sh" +
                    "ould be marked as Duplicate and the conversion should not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table1.AddRow(new string[] {
                            "14",
                            "b1457e30-3524-440d-b2f4-0d911403b170",
                            "Successful",
                            "GBP/USD",
                            "200",
                            "Sell",
                            "null",
                            "",
                            "",
                            "null"});
#line 7
 testRunner.And("we already have below rows in database:", ((string)(null)), table1, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table2.AddRow(new string[] {
                            "1",
                            "14",
                            "b1457e30-3524-440d-b2f4-0d911403b170",
                            "GBP/USD",
                            "Buy",
                            "100"});
#line 11
 testRunner.And("the request received is:", ((string)(null)), table2, "And ");
#line hidden
#line 15
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table3.AddRow(new string[] {
                            "1",
                            "14",
                            "b1457e30-3524-440d-b2f4-0d911403b170",
                            "DuplicateRequest",
                            "GBP/USD",
                            "100",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 17
 testRunner.Then("the expected results should be", ((string)(null)), table3, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table4.AddRow(new string[] {
                            "1",
                            "14",
                            "b1457e30-3524-440d-b2f4-0d911403b170",
                            "DuplicateRequest",
                            "GBP/USD",
                            "100",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 21
 testRunner.And("database should store", ((string)(null)), table4, "And ");
#line hidden
#line 25
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request was DuplicateRequest and the same request is received again" +
            " it should be marked as Duplicate and the conversion should not succeed", SourceLine=28)]
        public virtual void WhenPreviousRequestWasDuplicateRequestAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request was DuplicateRequest and the same request is received again" +
                    " it should be marked as Duplicate and the conversion should not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table5.AddRow(new string[] {
                            "14",
                            "b1457e30-3524-440d-b2f4-0d911403b170",
                            "DuplicateRequest",
                            "GBP/USD",
                            "200",
                            "Sell",
                            "null",
                            "",
                            "",
                            "null"});
#line 32
 testRunner.And("we already have below rows in database:", ((string)(null)), table5, "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table6.AddRow(new string[] {
                            "1",
                            "14",
                            "b1457e30-3524-440d-b2f4-0d911403b170",
                            "GBP/USD",
                            "Buy",
                            "100"});
#line 36
 testRunner.And("the request received is:", ((string)(null)), table6, "And ");
#line hidden
#line 40
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table7.AddRow(new string[] {
                            "1",
                            "14",
                            "b1457e30-3524-440d-b2f4-0d911403b170",
                            "DuplicateRequest",
                            "GBP/USD",
                            "100",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 42
 testRunner.Then("the expected results should be", ((string)(null)), table7, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table8.AddRow(new string[] {
                            "1",
                            "14",
                            "b1457e30-3524-440d-b2f4-0d911403b170",
                            "DuplicateRequest",
                            "GBP/USD",
                            "100",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 46
 testRunner.And("database should store", ((string)(null)), table8, "And ");
#line hidden
#line 50
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request failed due to ConversionFailedInvalidCcyPair and the same r" +
            "equest is received again it should be marked as Duplicate and the conversion sho" +
            "uld not succeed", SourceLine=52)]
        public virtual void WhenPreviousRequestFailedDueToConversionFailedInvalidCcyPairAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request failed due to ConversionFailedInvalidCcyPair and the same r" +
                    "equest is received again it should be marked as Duplicate and the conversion sho" +
                    "uld not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table9.AddRow(new string[] {
                            "11",
                            "d57aadbe-b49f-48e0-b1ba-d54b91edd036",
                            "ConversionFailedInvalidCcyPair",
                            "EUR/GBP",
                            "123",
                            "Sell",
                            "null",
                            "",
                            "",
                            "null"});
#line 56
 testRunner.And("we already have below rows in database:", ((string)(null)), table9, "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table10.AddRow(new string[] {
                            "1",
                            "11",
                            "d57aadbe-b49f-48e0-b1ba-d54b91edd036",
                            "EUR/GBP",
                            "Sell",
                            "123"});
#line 60
 testRunner.And("the request received is:", ((string)(null)), table10, "And ");
#line hidden
#line 64
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table11.AddRow(new string[] {
                            "1",
                            "11",
                            "d57aadbe-b49f-48e0-b1ba-d54b91edd036",
                            "DuplicateRequest",
                            "EUR/GBP",
                            "123",
                            "Sell",
                            "null",
                            "",
                            "",
                            "null"});
#line 66
 testRunner.Then("the expected results should be", ((string)(null)), table11, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table12.AddRow(new string[] {
                            "1",
                            "11",
                            "d57aadbe-b49f-48e0-b1ba-d54b91edd036",
                            "DuplicateRequest",
                            "EUR/GBP",
                            "123",
                            "Sell",
                            "null",
                            "",
                            "",
                            "null"});
#line 70
 testRunner.And("database should store", ((string)(null)), table12, "And ");
#line hidden
#line 74
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request failed due to ConversionFailedInvalidAmount and the same re" +
            "quest is received again it should be marked as Duplicate and the conversion shou" +
            "ld not succeed", SourceLine=76)]
        public virtual void WhenPreviousRequestFailedDueToConversionFailedInvalidAmountAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request failed due to ConversionFailedInvalidAmount and the same re" +
                    "quest is received again it should be marked as Duplicate and the conversion shou" +
                    "ld not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table13.AddRow(new string[] {
                            "12",
                            "1aacd4e4-cfef-400e-8e3f-523f2a2fec42",
                            "ConversionFailedInvalidAmount",
                            "EUR/CHF",
                            "10",
                            "Sell",
                            "null",
                            "",
                            "",
                            "null"});
#line 80
 testRunner.And("we already have below rows in database:", ((string)(null)), table13, "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table14.AddRow(new string[] {
                            "1",
                            "12",
                            "1aacd4e4-cfef-400e-8e3f-523f2a2fec42",
                            "EUR/CHF",
                            "Sell",
                            "10"});
#line 84
 testRunner.And("the request received is:", ((string)(null)), table14, "And ");
#line hidden
#line 88
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table15.AddRow(new string[] {
                            "1",
                            "12",
                            "1aacd4e4-cfef-400e-8e3f-523f2a2fec42",
                            "DuplicateRequest",
                            "EUR/CHF",
                            "10",
                            "Sell",
                            "null",
                            "",
                            "",
                            "null"});
#line 90
 testRunner.Then("the expected results should be", ((string)(null)), table15, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table16.AddRow(new string[] {
                            "1",
                            "12",
                            "1aacd4e4-cfef-400e-8e3f-523f2a2fec42",
                            "DuplicateRequest",
                            "EUR/CHF",
                            "10",
                            "Sell",
                            "null",
                            "",
                            "",
                            "null"});
#line 94
 testRunner.And("database should store", ((string)(null)), table16, "And ");
#line hidden
#line 98
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request failed due to ConversionFailedInvalidRequestId and the same" +
            " request is received again it should be marked as Duplicate and the conversion s" +
            "hould not succeed", SourceLine=100)]
        public virtual void WhenPreviousRequestFailedDueToConversionFailedInvalidRequestIdAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request failed due to ConversionFailedInvalidRequestId and the same" +
                    " request is received again it should be marked as Duplicate and the conversion s" +
                    "hould not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 101
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 102
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table17.AddRow(new string[] {
                            "13",
                            "1756cc35-1b13-4418-ada3-09d2bd7c6549",
                            "ConversionFailedInvalidRequestId",
                            "EUR/JPY",
                            "1000",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 104
 testRunner.And("we already have below rows in database:", ((string)(null)), table17, "And ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table18.AddRow(new string[] {
                            "1",
                            "13",
                            "1756cc35-1b13-4418-ada3-09d2bd7c6549",
                            "EUR/JPY",
                            "Buy",
                            "1000"});
#line 108
 testRunner.And("the request received is:", ((string)(null)), table18, "And ");
#line hidden
#line 112
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table19.AddRow(new string[] {
                            "1",
                            "13",
                            "1756cc35-1b13-4418-ada3-09d2bd7c6549",
                            "DuplicateRequest",
                            "EUR/JPY",
                            "1000",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 114
 testRunner.Then("the expected results should be", ((string)(null)), table19, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table20.AddRow(new string[] {
                            "1",
                            "13",
                            "1756cc35-1b13-4418-ada3-09d2bd7c6549",
                            "DuplicateRequest",
                            "EUR/JPY",
                            "1000",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 118
 testRunner.And("database should store", ((string)(null)), table20, "And ");
#line hidden
#line 122
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request failed due to ConversionFailedInvalidUserId and the same re" +
            "quest is received again it should be marked as Duplicate and the conversion shou" +
            "ld not succeed", SourceLine=123)]
        public virtual void WhenPreviousRequestFailedDueToConversionFailedInvalidUserIdAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request failed due to ConversionFailedInvalidUserId and the same re" +
                    "quest is received again it should be marked as Duplicate and the conversion shou" +
                    "ld not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 124
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 125
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table21.AddRow(new string[] {
                            "14",
                            "055be9ed-9683-49f5-a3f6-77e49b3dbe8f",
                            "ConversionFailedInvalidUserId",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 127
 testRunner.And("we already have below rows in database:", ((string)(null)), table21, "And ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table22.AddRow(new string[] {
                            "1",
                            "14",
                            "055be9ed-9683-49f5-a3f6-77e49b3dbe8f",
                            "EUR/USD",
                            "Buy",
                            "110"});
#line 131
 testRunner.And("the request received is:", ((string)(null)), table22, "And ");
#line hidden
#line 135
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table23.AddRow(new string[] {
                            "1",
                            "14",
                            "055be9ed-9683-49f5-a3f6-77e49b3dbe8f",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 137
 testRunner.Then("the expected results should be", ((string)(null)), table23, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table24.AddRow(new string[] {
                            "1",
                            "14",
                            "055be9ed-9683-49f5-a3f6-77e49b3dbe8f",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 141
 testRunner.And("database should store", ((string)(null)), table24, "And ");
#line hidden
#line 145
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request failed due to UserInactive and the same request is received" +
            " again it should be marked as Duplicate and the conversion should not succeed", SourceLine=147)]
        public virtual void WhenPreviousRequestFailedDueToUserInactiveAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request failed due to UserInactive and the same request is received" +
                    " again it should be marked as Duplicate and the conversion should not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 148
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 149
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table25.AddRow(new string[] {
                            "15",
                            "9ad8374f-f974-4e1e-90ca-b068aac5a7c0",
                            "UserInactive",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 151
 testRunner.And("we already have below rows in database:", ((string)(null)), table25, "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table26.AddRow(new string[] {
                            "1",
                            "15",
                            "9ad8374f-f974-4e1e-90ca-b068aac5a7c0",
                            "EUR/USD",
                            "Buy",
                            "110"});
#line 155
 testRunner.And("the request received is:", ((string)(null)), table26, "And ");
#line hidden
#line 159
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table27.AddRow(new string[] {
                            "1",
                            "15",
                            "9ad8374f-f974-4e1e-90ca-b068aac5a7c0",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 161
 testRunner.Then("the expected results should be", ((string)(null)), table27, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table28.AddRow(new string[] {
                            "1",
                            "15",
                            "9ad8374f-f974-4e1e-90ca-b068aac5a7c0",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 165
 testRunner.And("database should store", ((string)(null)), table28, "And ");
#line hidden
#line 169
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request failed due to ConversionFailedIncorrectMinimumTradingAmount" +
            " and the same request is received again it should be marked as Duplicate and the" +
            " conversion should not succeed", SourceLine=171)]
        public virtual void WhenPreviousRequestFailedDueToConversionFailedIncorrectMinimumTradingAmountAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request failed due to ConversionFailedIncorrectMinimumTradingAmount" +
                    " and the same request is received again it should be marked as Duplicate and the" +
                    " conversion should not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 172
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 173
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table29.AddRow(new string[] {
                            "16",
                            "7d22baba-5cd6-4b42-9903-09136b50386b",
                            "ConversionFailedIncorrectMinimumTradingAmount",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 175
 testRunner.And("we already have below rows in database:", ((string)(null)), table29, "And ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table30.AddRow(new string[] {
                            "1",
                            "16",
                            "7d22baba-5cd6-4b42-9903-09136b50386b",
                            "EUR/USD",
                            "Buy",
                            "110"});
#line 179
 testRunner.And("the request received is:", ((string)(null)), table30, "And ");
#line hidden
#line 183
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table31.AddRow(new string[] {
                            "1",
                            "16",
                            "7d22baba-5cd6-4b42-9903-09136b50386b",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 185
 testRunner.Then("the expected results should be", ((string)(null)), table31, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table32.AddRow(new string[] {
                            "1",
                            "16",
                            "7d22baba-5cd6-4b42-9903-09136b50386b",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 189
 testRunner.And("database should store", ((string)(null)), table32, "And ");
#line hidden
#line 193
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request failed due to ConversionFailedInsufficientBalance and the s" +
            "ame request is received again it should be marked as Duplicate and the conversio" +
            "n should not succeed", SourceLine=195)]
        public virtual void WhenPreviousRequestFailedDueToConversionFailedInsufficientBalanceAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request failed due to ConversionFailedInsufficientBalance and the s" +
                    "ame request is received again it should be marked as Duplicate and the conversio" +
                    "n should not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 196
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 197
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table33.AddRow(new string[] {
                            "17",
                            "b909751c-1907-462c-857f-7cf46628ec4e",
                            "ConversionFailedInsufficientBalance",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 199
 testRunner.And("we already have below rows in database:", ((string)(null)), table33, "And ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table34.AddRow(new string[] {
                            "1",
                            "17",
                            "b909751c-1907-462c-857f-7cf46628ec4e",
                            "EUR/USD",
                            "Buy",
                            "110"});
#line 203
 testRunner.And("the request received is:", ((string)(null)), table34, "And ");
#line hidden
#line 207
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table35.AddRow(new string[] {
                            "1",
                            "17",
                            "b909751c-1907-462c-857f-7cf46628ec4e",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 209
 testRunner.Then("the expected results should be", ((string)(null)), table35, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table36.AddRow(new string[] {
                            "1",
                            "17",
                            "b909751c-1907-462c-857f-7cf46628ec4e",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 213
 testRunner.And("database should store", ((string)(null)), table36, "And ");
#line hidden
#line 217
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request failed due to MarketClosed and the same request is received" +
            " again it should be marked as Duplicate and the conversion should not succeed", SourceLine=219)]
        public virtual void WhenPreviousRequestFailedDueToMarketClosedAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request failed due to MarketClosed and the same request is received" +
                    " again it should be marked as Duplicate and the conversion should not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 220
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 221
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table37.AddRow(new string[] {
                            "18",
                            "f40753e1-dc57-4d32-b209-711367ad1163",
                            "MarketClosed",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 223
 testRunner.And("we already have below rows in database:", ((string)(null)), table37, "And ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table38.AddRow(new string[] {
                            "1",
                            "18",
                            "f40753e1-dc57-4d32-b209-711367ad1163",
                            "EUR/USD",
                            "Buy",
                            "110"});
#line 227
 testRunner.And("the request received is:", ((string)(null)), table38, "And ");
#line hidden
#line 231
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table39.AddRow(new string[] {
                            "1",
                            "18",
                            "f40753e1-dc57-4d32-b209-711367ad1163",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 233
 testRunner.Then("the expected results should be", ((string)(null)), table39, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table40.AddRow(new string[] {
                            "1",
                            "18",
                            "f40753e1-dc57-4d32-b209-711367ad1163",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 237
 testRunner.And("database should store", ((string)(null)), table40, "And ");
#line hidden
#line 241
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request failed due to StalePrice and the same request is received a" +
            "gain it should be marked as Duplicate and the conversion should not succeed", SourceLine=243)]
        public virtual void WhenPreviousRequestFailedDueToStalePriceAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request failed due to StalePrice and the same request is received a" +
                    "gain it should be marked as Duplicate and the conversion should not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 244
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 245
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table41.AddRow(new string[] {
                            "19",
                            "1495100e-010a-4898-b9c7-3c956c57d080",
                            "StalePrice",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 247
 testRunner.And("we already have below rows in database:", ((string)(null)), table41, "And ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table42.AddRow(new string[] {
                            "1",
                            "19",
                            "1495100e-010a-4898-b9c7-3c956c57d080",
                            "EUR/USD",
                            "Buy",
                            "110"});
#line 251
 testRunner.And("the request received is:", ((string)(null)), table42, "And ");
#line hidden
#line 255
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table43.AddRow(new string[] {
                            "1",
                            "19",
                            "1495100e-010a-4898-b9c7-3c956c57d080",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 257
 testRunner.Then("the expected results should be", ((string)(null)), table43, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table44.AddRow(new string[] {
                            "1",
                            "19",
                            "1495100e-010a-4898-b9c7-3c956c57d080",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 261
 testRunner.And("database should store", ((string)(null)), table44, "And ");
#line hidden
#line 265
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When previous request failed due to UnknownError and the same request is received" +
            " again it should be marked as Duplicate and the conversion should not succeed", SourceLine=267)]
        public virtual void WhenPreviousRequestFailedDueToUnknownErrorAndTheSameRequestIsReceivedAgainItShouldBeMarkedAsDuplicateAndTheConversionShouldNotSucceed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When previous request failed due to UnknownError and the same request is received" +
                    " again it should be marked as Duplicate and the conversion should not succeed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 268
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 269
 testRunner.Given("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table45.AddRow(new string[] {
                            "20",
                            "faeabb62-81de-4fc2-a63f-881140889297",
                            "UnknownError",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 271
 testRunner.And("we already have below rows in database:", ((string)(null)), table45, "And ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "CcyPair",
                            "Side",
                            "Amount"});
                table46.AddRow(new string[] {
                            "1",
                            "20",
                            "faeabb62-81de-4fc2-a63f-881140889297",
                            "EUR/USD",
                            "Buy",
                            "110"});
#line 275
 testRunner.And("the request received is:", ((string)(null)), table46, "And ");
#line hidden
#line 279
 testRunner.When("we run the calculation with latest market price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table47.AddRow(new string[] {
                            "1",
                            "20",
                            "faeabb62-81de-4fc2-a63f-881140889297",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 281
 testRunner.Then("the expected results should be", ((string)(null)), table47, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "RequestId",
                            "ConversionResult",
                            "CcyPair",
                            "OriginalAmount",
                            "Side",
                            "ConvertedAmountCurrency",
                            "ConvertedAmount",
                            "PxUsed",
                            "OriginalAmountCcy"});
                table48.AddRow(new string[] {
                            "1",
                            "20",
                            "faeabb62-81de-4fc2-a63f-881140889297",
                            "DuplicateRequest",
                            "EUR/USD",
                            "110",
                            "Buy",
                            "null",
                            "",
                            "",
                            "null"});
#line 285
 testRunner.And("database should store", ((string)(null)), table48, "And ");
#line hidden
#line 289
 testRunner.And("user settings are not called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
